[{"fullname": "learning_orchestra_client", "modulename": "learning_orchestra_client", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.builder", "modulename": "learning_orchestra_client.builder", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.builder.builder", "modulename": "learning_orchestra_client.builder.builder", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.builder.builder.BuilderSparkMl", "modulename": "learning_orchestra_client.builder.builder", "qualname": "BuilderSparkMl", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.builder.builder.BuilderSparkMl.__init__", "modulename": "learning_orchestra_client.builder.builder", "qualname": "BuilderSparkMl.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.builder.builder.BuilderSparkMl.run_spark_ml_sync", "modulename": "learning_orchestra_client.builder.builder", "qualname": "BuilderSparkMl.run_spark_ml_sync", "type": "function", "doc": "<p>description: This method call runs several steps of a machine\nlearning pipeline (transform, tune, train and evaluate, for instance)\nusing a model code and several classifiers. It represents a way to run\nan entire pipeline. The caller waits until the method execution ends,\nsince it is a synchronous method.</p>\n\n<p>train_dataset_name: Represent final train dataset.\ntest_dataset_name: Represent final test dataset.\nmodeling_code: Represent Python3 code for pyspark pre-processing model\nmodel_classifiers: list of initial classifiers to be used in the model\npretty_response: if True it represents a result useful for visualization</p>\n\n<p>return: The set of predictions (URIs of them).</p>\n", "parameters": ["self", "train_dataset_name", "test_dataset_name", "modeling_code", "model_classifiers", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.builder.builder.BuilderSparkMl.run_spark_ml_async", "modulename": "learning_orchestra_client.builder.builder", "qualname": "BuilderSparkMl.run_spark_ml_async", "type": "function", "doc": "<p>description: This method call runs several steps of a machine\nlearning pipeline (transform, tune, train and evaluate, for instance)\nusing a model code and several classifiers. It represents a way to run\nan entire pipeline. The caller does not wait until the method execution\nends, since it is an asynchronous method.</p>\n\n<p>train_dataset_name: Represent final train dataset.\ntest_dataset_name: Represent final test dataset.\nmodeling_code: Represent Python3 code for pyspark pre-processing model\nmodel_classifiers: list of initial classifiers to be used in the model\npretty_response: if True it represents a result useful for visualization</p>\n\n<p>return: the URL to retrieve the Spark pipeline result</p>\n", "parameters": ["self", "train_dataset_name", "test_dataset_name", "modeling_code", "model_classifiers", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.builder.builder.BuilderSparkMl.search_all_builders", "modulename": "learning_orchestra_client.builder.builder", "qualname": "BuilderSparkMl.search_all_builders", "type": "function", "doc": "<p>description: This method retrieves all model predictions metadata. It\ndoes not retrieve the model predictions content.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.</p>\n\n<p>return: A list with all model predictions metadata stored in Learning\nOrchestra or an empty result.</p>\n", "parameters": ["self", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.builder.builder.BuilderSparkMl.search_builder_register_predictions", "modulename": "learning_orchestra_client.builder.builder", "qualname": "BuilderSparkMl.search_builder_register_predictions", "type": "function", "doc": "<p>description: This method is responsible for retrieving the model\npredictions content.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nbuilder_name: Represents the model predictions name.\nquery: Query to make in MongoDB(default: empty query)\nlimit: Number of rows to return in pagination(default: 10) (maximum is\nset at 20 rows per request)\nskip: Number of rows to skip in pagination(default: 0)</p>\n\n<p>return: A page with some tuples or registers inside or an error if the\npipeline runs incorrectly. The current page is also returned to be used\nin future content requests.</p>\n", "parameters": ["self", "builder_name", "query", "limit", "skip", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.builder.builder.BuilderSparkMl.search_builder", "modulename": "learning_orchestra_client.builder.builder", "qualname": "BuilderSparkMl.search_builder", "type": "function", "doc": "<p>description:  This method is responsible for retrieving a specific\nmodel metadata.</p>\n\n<p>pretty_response: If true return indented string, else return dict.\nbuilder_name: Represents the model predictions name.\nlimit: Number of rows to return in pagination(default: 10) (maximum is\nset at 20 rows per request)\nskip: Number of rows to skip in pagination(default: 0)</p>\n\n<p>return: Specific model prediction metadata stored in Learning Orchestra\nor an error if there is no such projections.</p>\n", "parameters": ["self", "builder_name", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.builder.builder.BuilderSparkMl.delete_builder", "modulename": "learning_orchestra_client.builder.builder", "qualname": "BuilderSparkMl.delete_builder", "type": "function", "doc": "<p>description: This method is responsible for deleting a model prediction.\nThe delete operation is always asynchronous,\nsince the deletion is performed in background.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nbuilder_name: Represents the pipeline name.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect delete message</p>\n", "parameters": ["self", "builder_name", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.builder.builder.BuilderSparkMl.wait", "modulename": "learning_orchestra_client.builder.builder", "qualname": "BuilderSparkMl.wait", "type": "function", "doc": "<p>description: This method is responsible to create a synchronization\nbarrier for the run_spark_ml_async method.</p>\n\n<p>dataset_name: Represents the pipeline name.\ntimeout: Represents the time in seconds to wait for a builder to\nfinish its run.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect execution of a pipeline</p>\n", "parameters": ["self", "dataset_name", "timeout"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.dataset", "modulename": "learning_orchestra_client.dataset", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.dataset.csv", "modulename": "learning_orchestra_client.dataset.csv", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.dataset.csv.DatasetCsv", "modulename": "learning_orchestra_client.dataset.csv", "qualname": "DatasetCsv", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.dataset.csv.DatasetCsv.__init__", "modulename": "learning_orchestra_client.dataset.csv", "qualname": "DatasetCsv.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.dataset.generic", "modulename": "learning_orchestra_client.dataset.generic", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.dataset.generic.DatasetGeneric", "modulename": "learning_orchestra_client.dataset.generic", "qualname": "DatasetGeneric", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.dataset.generic.DatasetGeneric.__init__", "modulename": "learning_orchestra_client.dataset.generic", "qualname": "DatasetGeneric.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.evaluate", "modulename": "learning_orchestra_client.evaluate", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.evaluate.scikitlearn", "modulename": "learning_orchestra_client.evaluate.scikitlearn", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.evaluate.scikitlearn.EvaluateScikitLearn", "modulename": "learning_orchestra_client.evaluate.scikitlearn", "qualname": "EvaluateScikitLearn", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.evaluate.scikitlearn.EvaluateScikitLearn.__init__", "modulename": "learning_orchestra_client.evaluate.scikitlearn", "qualname": "EvaluateScikitLearn.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.evaluate.tensorflow", "modulename": "learning_orchestra_client.evaluate.tensorflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.evaluate.tensorflow.EvaluateTensorflow", "modulename": "learning_orchestra_client.evaluate.tensorflow", "qualname": "EvaluateTensorflow", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.evaluate.tensorflow.EvaluateTensorflow.__init__", "modulename": "learning_orchestra_client.evaluate.tensorflow", "qualname": "EvaluateTensorflow.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.explore", "modulename": "learning_orchestra_client.explore", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.explore.histogram", "modulename": "learning_orchestra_client.explore.histogram", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.explore.histogram.ExploreHistogram", "modulename": "learning_orchestra_client.explore.histogram", "qualname": "ExploreHistogram", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.explore.histogram.ExploreHistogram.__init__", "modulename": "learning_orchestra_client.explore.histogram", "qualname": "ExploreHistogram.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.explore.histogram.ExploreHistogram.run_histogram_sync", "modulename": "learning_orchestra_client.explore.histogram", "qualname": "ExploreHistogram.run_histogram_sync", "type": "function", "doc": "<p>description: This method creates a histogram\nsynchronously, so the caller waits until the histogram is inserted into\nthe Learning Orchestra storage mechanism.</p>\n\n<p>dataset_name: Represents the name of dataset.\nhistogram_name: Represents the name of histogram.\nfields: Represents a list of attributes.\npretty_response: If true it returns a string, otherwise a dictionary.</p>\n\n<p>return: A JSON object with error or warning messages. In case of\nsuccess, it returns a histogram.</p>\n", "parameters": ["self", "dataset_name", "histogram_name", "fields", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.explore.histogram.ExploreHistogram.run_histogram_async", "modulename": "learning_orchestra_client.explore.histogram", "qualname": "ExploreHistogram.run_histogram_async", "type": "function", "doc": "<p>description: This method creates a histogram\nasynchronously, so the caller does not wait until the histogram is\ninserted into the Learning Orchestra storage mechanism.</p>\n\n<p>dataset_name: Represents the name of dataset.\nhistogram_name: Represents the name of histogram.\nfields: Represents a list of attributes.\npretty_response: If true it returns a string, otherwise a dictionary.</p>\n\n<p>return: A JSON object with error or warning messages. In case of\nsuccess, it returns a histogram.</p>\n", "parameters": ["self", "dataset_name", "histogram_name", "fields", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.explore.histogram.ExploreHistogram.search_all_histograms", "modulename": "learning_orchestra_client.explore.histogram", "qualname": "ExploreHistogram.search_all_histograms", "type": "function", "doc": "<p>description: This method retrieves all histogram metadata, it does not\nretrieve the histogram content.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.</p>\n\n<p>return: A list with all histogram metadata stored in Learning Orchestra\nor an empty result.</p>\n", "parameters": ["self", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.explore.histogram.ExploreHistogram.search_histogram_content", "modulename": "learning_orchestra_client.explore.histogram", "qualname": "ExploreHistogram.search_histogram_content", "type": "function", "doc": "<p>description: This method is responsible for retrieving the histogram\ncontent.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nhistogram_name: Represents the histogram name.\nquery: Query to make in MongoDB(default: empty query)\nlimit: Number of rows to return in pagination(default: 10) (maximum is\nset at 20 rows per request)\nskip: Number of rows to skip in pagination(default: 0)</p>\n\n<p>return: A page with some tuples or registers inside or an error if there\nis no such projection. The current page is also returned to be used in\nfuture content requests.</p>\n", "parameters": ["self", "histogram_name", "query", "limit", "skip", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.explore.histogram.ExploreHistogram.delete_histogram", "modulename": "learning_orchestra_client.explore.histogram", "qualname": "ExploreHistogram.delete_histogram", "type": "function", "doc": "<p>description: This method is responsible for deleting a histogram.\nThe delete operation is always asynchronous,\nsince the deletion is performed in background.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nhistogram_name: Represents the histogram name.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect delete message</p>\n", "parameters": ["self", "histogram_name", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.explore.histogram.ExploreHistogram.wait", "modulename": "learning_orchestra_client.explore.histogram", "qualname": "ExploreHistogram.wait", "type": "function", "doc": "<p>description: This method is responsible to create a synchronization\nbarrier for the run_histogram_async method or delete_histogram\nmethod.</p>\n\n<p>name: Represents the histogram name.\ntimeout: Represents the time in seconds to wait for a histogram to\nfinish its run.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect histogram result</p>\n", "parameters": ["self", "name", "timeout"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.explore.scikitlearn", "modulename": "learning_orchestra_client.explore.scikitlearn", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.explore.scikitlearn.ExploreScikitLearn", "modulename": "learning_orchestra_client.explore.scikitlearn", "qualname": "ExploreScikitLearn", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.explore.scikitlearn.ExploreScikitLearn.__init__", "modulename": "learning_orchestra_client.explore.scikitlearn", "qualname": "ExploreScikitLearn.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.explore.tensorflow", "modulename": "learning_orchestra_client.explore.tensorflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.explore.tensorflow.ExploreTensorflow", "modulename": "learning_orchestra_client.explore.tensorflow", "qualname": "ExploreTensorflow", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.explore.tensorflow.ExploreTensorflow.__init__", "modulename": "learning_orchestra_client.explore.tensorflow", "qualname": "ExploreTensorflow.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.function", "modulename": "learning_orchestra_client.function", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.function.python", "modulename": "learning_orchestra_client.function.python", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.function.python.FunctionPython", "modulename": "learning_orchestra_client.function.python", "qualname": "FunctionPython", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.function.python.FunctionPython.__init__", "modulename": "learning_orchestra_client.function.python", "qualname": "FunctionPython.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.function.python.FunctionPython.run_function_sync", "modulename": "learning_orchestra_client.function.python", "qualname": "FunctionPython.run_function_sync", "type": "function", "doc": "<p>description: This method runs a python 3 code in sync mode, so it\nrepresents a wildcard for the data scientist. It can be used when\ntrain, predict, tune, explore or any other pipe must be customized. The\nfunction is also useful for new pipes. pretty_response: If true it\nreturns a string, otherwise a dictionary.</p>\n\n<p>name: Is the name of the object stored in Learning Orchestra storage\nsystem (volume or mongoDB).\nurl: Url to CSV file.</p>\n\n<p>return: A JSON object with an error or warning message or the correct\noperation result.</p>\n", "parameters": ["self", "name", "parameters", "code", "description", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.function.python.FunctionPython.run_function_async", "modulename": "learning_orchestra_client.function.python", "qualname": "FunctionPython.run_function_async", "type": "function", "doc": "<p>description: This method runs a python 3 code in async mode, so it\nrepresents a wildcard for the data scientist. It does not lock the\ncaller, so a wait method must be used. It can be used when train,\npredict, tune, explore or any other pipe must be customized. The\nfunction is also useful for new pipes.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nname: Is the name of the function to be called\ncode: the Python code\nparameters: the parameters of the function being called</p>\n\n<p>return: A JSON object with an error or warning message or the correct\noperation result.</p>\n", "parameters": ["self", "name", "parameters", "code", "description", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.function.python.FunctionPython.search_all_executions", "modulename": "learning_orchestra_client.function.python", "qualname": "FunctionPython.search_all_executions", "type": "function", "doc": "<p>description: This method retrieves all created functions metadata,\ni.e., it does not retrieve the function result content.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.</p>\n\n<p>return: All function executions metadata stored in Learning Orchestra\nor an empty result.</p>\n", "parameters": ["self", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.function.python.FunctionPython.delete_execution", "modulename": "learning_orchestra_client.function.python", "qualname": "FunctionPython.delete_execution", "type": "function", "doc": "<p>description: This method is responsible for deleting the function.\nThis delete operation is asynchronous, so it does not lock the caller\n until the deletion finished. Instead, it returns a JSON object with a\n URL for a future use. The caller uses the URL for delete checks.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nname: Represents the function name.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect delete message</p>\n", "parameters": ["self", "name", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.function.python.FunctionPython.search_execution_content", "modulename": "learning_orchestra_client.function.python", "qualname": "FunctionPython.search_execution_content", "type": "function", "doc": "<p>description:  This method is responsible for retrieving the function\nresults, including metadata. A function is executed many times, using\ndifferent parameters,\nthus many results are stored\nin Learning Orchestra.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nname: Is the name of the function.\nquery: Query to make in MongoDB(default: empty query)\nlimit: Number of rows to return in pagination(default: 10) (maximum is\nset at 20 rows per request)\nskip: Number of rows to skip in pagination(default: 0)</p>\n\n<p>return:\n A page with some function results inside or an error if there\nis no such function. The current page is also returned to be used in\nfuture content requests.</p>\n", "parameters": ["self", "name", "query", "limit", "skip", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.function.python.FunctionPython.wait", "modulename": "learning_orchestra_client.function.python", "qualname": "FunctionPython.wait", "type": "function", "doc": "<p>description: This method is responsible to create a synchronization\nbarrier for the run_function_async method or delete_function method.</p>\n\n<p>name: Represents the function name.\ntimeout: Represents the time in seconds to wait for a function to\nfinish its run.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect function result</p>\n", "parameters": ["self", "dataset_name", "timeout"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.model", "modulename": "learning_orchestra_client.model", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.model.scikitlearn", "modulename": "learning_orchestra_client.model.scikitlearn", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.model.scikitlearn.ModelScikitLearn", "modulename": "learning_orchestra_client.model.scikitlearn", "qualname": "ModelScikitLearn", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.model.scikitlearn.ModelScikitLearn.__init__", "modulename": "learning_orchestra_client.model.scikitlearn", "qualname": "ModelScikitLearn.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.model.tensorflow", "modulename": "learning_orchestra_client.model.tensorflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.model.tensorflow.ModelTensorflow", "modulename": "learning_orchestra_client.model.tensorflow", "qualname": "ModelTensorflow", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.model.tensorflow.ModelTensorflow.__init__", "modulename": "learning_orchestra_client.model.tensorflow", "qualname": "ModelTensorflow.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.observe", "modulename": "learning_orchestra_client.observe", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.observe.observe", "modulename": "learning_orchestra_client.observe.observe", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.observe.observe.Observer", "modulename": "learning_orchestra_client.observe.observe", "qualname": "Observer", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.observe.observe.Observer.__init__", "modulename": "learning_orchestra_client.observe.observe", "qualname": "Observer.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.observe.observe.Observer.wait", "modulename": "learning_orchestra_client.observe.observe", "qualname": "Observer.wait", "type": "function", "doc": "<p>:description: Observe the end of a pipe for a timeout seconds or\nuntil the pipe finishes its execution.</p>\n\n<p>name: Represents the pipe name. Any tune, train, predict service can\nwait its finish with a\nwait method call.\ntimeout: the maximum time to wait the observed step, in seconds.</p>\n\n<p>:return: If True it returns a String. Otherwise, it returns\na dictionary with the content of a mongo collection, representing\nany pipe result</p>\n", "parameters": ["self", "name", "timeout"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.observe.observe.Observer.observe_pipe", "modulename": "learning_orchestra_client.observe.observe", "qualname": "Observer.observe_pipe", "type": "function", "doc": "<p>:description: It waits until a pipe change its content\n(replace, insert, update and delete mongoDB collection operation\ntypes), so it is a bit different\nfrom wait method with a timeout and a finish explicit condition.</p>\n\n<p>:name: the name of the pipe to be observed. A train, predict, explore,\ntransform or any\nother pipe can be observed.\ntimeout: the maximum time to wait the observed step, in milliseconds.</p>\n\n<p>:return: A pymongo CollectionChangeStream object. You must use the\nbuiltin next() method to iterate over changes.</p>\n", "parameters": ["self", "name", "timeout"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.predict", "modulename": "learning_orchestra_client.predict", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.predict.scikitlearn", "modulename": "learning_orchestra_client.predict.scikitlearn", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.predict.scikitlearn.PredictScikitLearn", "modulename": "learning_orchestra_client.predict.scikitlearn", "qualname": "PredictScikitLearn", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.predict.scikitlearn.PredictScikitLearn.__init__", "modulename": "learning_orchestra_client.predict.scikitlearn", "qualname": "PredictScikitLearn.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.predict.tensorflow", "modulename": "learning_orchestra_client.predict.tensorflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.predict.tensorflow.PredictTensorflow", "modulename": "learning_orchestra_client.predict.tensorflow", "qualname": "PredictTensorflow", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.predict.tensorflow.PredictTensorflow.__init__", "modulename": "learning_orchestra_client.predict.tensorflow", "qualname": "PredictTensorflow.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.train", "modulename": "learning_orchestra_client.train", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.train.scikitlearn", "modulename": "learning_orchestra_client.train.scikitlearn", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.train.scikitlearn.TrainScikitLearn", "modulename": "learning_orchestra_client.train.scikitlearn", "qualname": "TrainScikitLearn", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.train.scikitlearn.TrainScikitLearn.__init__", "modulename": "learning_orchestra_client.train.scikitlearn", "qualname": "TrainScikitLearn.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.train.tensorflow", "modulename": "learning_orchestra_client.train.tensorflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.train.tensorflow.TrainTensorflow", "modulename": "learning_orchestra_client.train.tensorflow", "qualname": "TrainTensorflow", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.train.tensorflow.TrainTensorflow.__init__", "modulename": "learning_orchestra_client.train.tensorflow", "qualname": "TrainTensorflow.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform", "modulename": "learning_orchestra_client.transform", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.transform.data_type", "modulename": "learning_orchestra_client.transform.data_type", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.transform.data_type.TransformDataType", "modulename": "learning_orchestra_client.transform.data_type", "qualname": "TransformDataType", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.transform.data_type.TransformDataType.__init__", "modulename": "learning_orchestra_client.transform.data_type", "qualname": "TransformDataType.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.data_type.TransformDataType.update_dataset_type_sync", "modulename": "learning_orchestra_client.transform.data_type", "qualname": "TransformDataType.update_dataset_type_sync", "type": "function", "doc": "<p>description: Change dataset field types (from number to string and\nvice-versa). Many type modifications can be performed in one method\ncall.</p>\n\n<p>dataset_name: Represents the dataset name.\ntypes: Represents a map, where the pair key:value is a field:type</p>\n\n<p>return: A JSON object with error or warning messages or a correct\ndatatype result.</p>\n", "parameters": ["self", "dataset_name", "types", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.data_type.TransformDataType.update_dataset_type_async", "modulename": "learning_orchestra_client.transform.data_type", "qualname": "TransformDataType.update_dataset_type_async", "type": "function", "doc": "<p>description: Change dataset field types (from number to string and\nvice-versa). Many type modifications can be performed in one method\ncall. Is is an asynchronous call, thus a wait method must be also\ncalled to guarantee a synchronization barrier.</p>\n\n<p>dataset_name: Represents the dataset name.\ntypes: Represents a map, where the pair key:value is a field:type</p>\n\n<p>return: A JSON object with error or warning messages or a correct\ndatatype result.</p>\n", "parameters": ["self", "dataset_name", "types", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.data_type.TransformDataType.search_all_datatype", "modulename": "learning_orchestra_client.transform.data_type", "qualname": "TransformDataType.search_all_datatype", "type": "function", "doc": "<p>description: This method retrieves all datatype metadata, i.e., it does\nnot retrieve the datatype content.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.</p>\n\n<p>return: All predict metadata stored in Learning Orchestra or an empty\nresult.</p>\n", "parameters": ["self", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.data_type.TransformDataType.delete_datatype", "modulename": "learning_orchestra_client.transform.data_type", "qualname": "TransformDataType.delete_datatype", "type": "function", "doc": "<p>description: This method is responsible for deleting the datatype step.\nThis delete operation is asynchronous, so it does not lock the caller\n until the deletion finished. Instead, it returns a JSON object with a\n URL for a future use. The caller uses the URL for delete checks.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nname: Represents the datatype name.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect delete message</p>\n", "parameters": ["self", "name", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.data_type.TransformDataType.search_datatype_content", "modulename": "learning_orchestra_client.transform.data_type", "qualname": "TransformDataType.search_datatype_content", "type": "function", "doc": "<p>description:  This method is responsible for retrieving all the datatype\ntuples or registers, as well as the metadata content</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nname: Is the name of the datatype object\nquery: Query to make in MongoDB(default: empty query)\nlimit: Number of rows to return in pagination(default: 10) (maximum is\nset at 20 rows per request)\nskip: Number of rows to skip in pagination(default: 0)</p>\n\n<p>return: A page with some registers or tuples inside or an error if there\nis no such datatype object. The current page is also returned to be\nused in future content requests.</p>\n", "parameters": ["self", "name", "query", "limit", "skip", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.data_type.TransformDataType.wait", "modulename": "learning_orchestra_client.transform.data_type", "qualname": "TransformDataType.wait", "type": "function", "doc": "<p>description: This method is responsible to create a synchronization\nbarrier for the update_dataset_type_async method, delete_datatype\nmethod.</p>\n\n<p>name: Represents the datatype name.\ntimeout: Represents the time in seconds to wait for a datatype to\nfinish its run.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect datatype result</p>\n", "parameters": ["self", "dataset_name", "timeout"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.projection", "modulename": "learning_orchestra_client.transform.projection", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.transform.projection.TransformProjection", "modulename": "learning_orchestra_client.transform.projection", "qualname": "TransformProjection", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.transform.projection.TransformProjection.__init__", "modulename": "learning_orchestra_client.transform.projection", "qualname": "TransformProjection.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.projection.TransformProjection.remove_dataset_attributes_sync", "modulename": "learning_orchestra_client.transform.projection", "qualname": "TransformProjection.remove_dataset_attributes_sync", "type": "function", "doc": "<p>description: This method removes a set of attributes of a dataset\nsynchronously, the caller waits until the projection is inserted into\nthe Learning Orchestra storage mechanism.</p>\n\n<p>pretty_response: If returns true a string, otherwise a dictionary.\nprojection_name: Represents the projection name.\ndataset_name: Represents the dataset name.\nfields: Represents the set of attributes to be removed. This is list\nwith some attributes.</p>\n\n<p>return: A JSON object with error or warning messages. In case of\nsuccess, it returns the projection metadata.</p>\n", "parameters": ["self", "dataset_name", "projection_name", "fields", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.projection.TransformProjection.remove_dataset_attributes_async", "modulename": "learning_orchestra_client.transform.projection", "qualname": "TransformProjection.remove_dataset_attributes_async", "type": "function", "doc": "<p>description: This method removes a set of attributes of a dataset\nasynchronously; this way, the caller does not wait until the projection\nis inserted into the Learning Orchestra storage mechanism. A wait\nmethod call must occur to guarantee a synchronization barrier.</p>\n\n<p>pretty_response: If returns true a string, otherwise a dictionary.\nprojection_name: Represents the projection name.\ndataset_name: Represents the dataset name.\nfields: Represents the set of attributes to be removed. This is list\nwith some attributes.</p>\n\n<p>return: A JSON object with error or warning messages. In case of\nsuccess, it returns the projection URL to be obtained latter with a\nwait method call.</p>\n", "parameters": ["self", "dataset_name", "projection_name", "fields", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.projection.TransformProjection.search_all_projections", "modulename": "learning_orchestra_client.transform.projection", "qualname": "TransformProjection.search_all_projections", "type": "function", "doc": "<p>description: This method retrieves all projection metadata, i.e., it\ndoes not retrieve the projection content.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.</p>\n\n<p>return: A list with all projections metadata stored in Learning\nOrchestra or an empty result.</p>\n", "parameters": ["self", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.projection.TransformProjection.search_projection_content", "modulename": "learning_orchestra_client.transform.projection", "qualname": "TransformProjection.search_projection_content", "type": "function", "doc": "<p>description: This method is responsible for retrieving the projection\ncontent.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nprojection_name: Represents the projection name.\nquery: Query to make in MongoDB(default: empty query)\nlimit: Number of rows to return in pagination(default: 10) (maximum is\nset at 20 rows per request)\nskip: Number of rows to skip in pagination(default: 0)</p>\n\n<p>return: A page with some tuples or registers inside or an error if there\nis no such projection. The current page is also returned to be used in\nfuture content requests.</p>\n", "parameters": ["self", "projection_name", "query", "limit", "skip", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.projection.TransformProjection.delete_projection", "modulename": "learning_orchestra_client.transform.projection", "qualname": "TransformProjection.delete_projection", "type": "function", "doc": "<p>description: This method is responsible for deleting a projection.\nThe delete operation is always asynchronous and performed in background.</p>\n\n<p>pretty_response: If true it returns a string, otherwise a dictionary.\nprojection_name: Represents the projection name.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect delete message</p>\n", "parameters": ["self", "projection_name", "pretty_response"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.projection.TransformProjection.wait", "modulename": "learning_orchestra_client.transform.projection", "qualname": "TransformProjection.wait", "type": "function", "doc": "<p>description: This method is responsible to create a synchronization\nbarrier for the remove_dataset_attributes_async method,\ndelete_projection method.</p>\n\n<p>name: Represents the projection name.\ntimeout: Represents the time in seconds to wait for a projection to\nfinish its run.</p>\n\n<p>return: JSON object with an error message, a warning message or a\ncorrect projection result</p>\n", "parameters": ["self", "projection_name", "timeout"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.scikitlearn", "modulename": "learning_orchestra_client.transform.scikitlearn", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.transform.scikitlearn.TransformScikitLearn", "modulename": "learning_orchestra_client.transform.scikitlearn", "qualname": "TransformScikitLearn", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.transform.scikitlearn.TransformScikitLearn.__init__", "modulename": "learning_orchestra_client.transform.scikitlearn", "qualname": "TransformScikitLearn.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}, {"fullname": "learning_orchestra_client.transform.tensorflow", "modulename": "learning_orchestra_client.transform.tensorflow", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.transform.tensorflow.TransformTensorflow", "modulename": "learning_orchestra_client.transform.tensorflow", "qualname": "TransformTensorflow", "type": "class", "doc": "<p></p>\n"}, {"fullname": "learning_orchestra_client.transform.tensorflow.TransformTensorflow.__init__", "modulename": "learning_orchestra_client.transform.tensorflow", "qualname": "TransformTensorflow.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "cluster_ip"], "funcdef": "def"}]